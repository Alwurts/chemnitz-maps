/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const TermsOfServiceLazyImport = createFileRoute('/terms-of-service')()
const SignupLazyImport = createFileRoute('/signup')()
const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const LoginLazyImport = createFileRoute('/login')()
const ImprintLazyImport = createFileRoute('/imprint')()
const DataInformationLazyImport = createFileRoute('/data-information')()
const DataAttributionLazyImport = createFileRoute('/data-attribution')()
const AuthPasswordLazyImport = createFileRoute('/auth/password')()

// Create/Update Routes

const TermsOfServiceLazyRoute = TermsOfServiceLazyImport.update({
  path: '/terms-of-service',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/terms-of-service.lazy').then((d) => d.Route),
)

const SignupLazyRoute = SignupLazyImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ImprintLazyRoute = ImprintLazyImport.update({
  path: '/imprint',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/imprint.lazy').then((d) => d.Route))

const DataInformationLazyRoute = DataInformationLazyImport.update({
  path: '/data-information',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/data-information.lazy').then((d) => d.Route),
)

const DataAttributionLazyRoute = DataAttributionLazyImport.update({
  path: '/data-attribution',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/data-attribution.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthPasswordLazyRoute = AuthPasswordLazyImport.update({
  path: '/auth/password',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/password.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/data-attribution': {
      id: '/data-attribution'
      path: '/data-attribution'
      fullPath: '/data-attribution'
      preLoaderRoute: typeof DataAttributionLazyImport
      parentRoute: typeof rootRoute
    }
    '/data-information': {
      id: '/data-information'
      path: '/data-information'
      fullPath: '/data-information'
      preLoaderRoute: typeof DataInformationLazyImport
      parentRoute: typeof rootRoute
    }
    '/imprint': {
      id: '/imprint'
      path: '/imprint'
      fullPath: '/imprint'
      preLoaderRoute: typeof ImprintLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/password': {
      id: '/auth/password'
      path: '/auth/password'
      fullPath: '/auth/password'
      preLoaderRoute: typeof AuthPasswordLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  DataAttributionLazyRoute,
  DataInformationLazyRoute,
  ImprintLazyRoute,
  LoginLazyRoute,
  PrivacyPolicyLazyRoute,
  SignupLazyRoute,
  TermsOfServiceLazyRoute,
  AuthPasswordLazyRoute,
})

/* prettier-ignore-end */
